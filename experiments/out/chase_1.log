pygame 2.0.1 (SDL 2.0.14, Python 3.8.10)
Hello from the pygame community. https://www.pygame.org/contribute.html
================================================================================
SLTP v.0.2.0
================================================================================
================================================================================
(pid: 2679) STARTING STEP #1: Train: Explore the state space of the training instances
================================================================================
------------------------------------------------
 DOMAIN PARAMETERS: 
------------------------------------------------
------------------------------------------------
domain_name: chase
use_player_as_feature: False
use_player_to_encode: False
use_next_player_as_feature: False
use_next_player_to_encode: False
use_margin_as_feature: False
objects_to_ignore: set()
map_cells: True
use_diagonals_for_map_cells: True
use_adjacency: {'cell', 'col', 'row'}
use_bidirectional: {}
sorts_to_use: {'cell', 'col', 'row'}
unary_predicates: {}
can_build_walls: False
use_distance_2: {}
use_distance_more_than_1: {}
use_verbose_margin_as_feature: False
ava_actions: {1: {4, 5, 6, 7}, 2: {0, 1, 2, 3}}
max_actions: {1: 1, 2: 1}
------------------------------------------------
------------------------------------------------
(START Episode 0)
------------------------------------------------
------------------------------------------------
(0) Exploration of the training sample:
------------------------------------------------
2021-07-16 17:06:10 INFO     Expanding train instance: chase - 0
0. #A.....#
1. #......#
2. #......#
3. #.....T#

------------------------------------------------
(0) Generation of the training sample:
------------------------------------------------
2021-07-16 17:06:10 INFO     sample: #states=250, #transition-entries=248, #transitions=248
2021-07-16 17:06:10 INFO     Entire sample: roots: 1, states: 250, transitions: 248 (234 optimal), goals: 50, alive: 200, deadends: 0
2021-07-16 17:06:10 INFO     Printing SAT transition matrix with 250 states, 54 states with some outgoing transition, 4 operators, 248 (non-det) transitions, and 320 (adv) transitions,
------------------------------------------------
(0) Generate the pool of candidate features:
------------------------------------------------
2021-07-16 17:06:10 INFO     Starting generation of feature pool. State sample used to detect redundancies: roots: 1, states: 250, transitions: 248 (234 optimal), goals: 50, alive: 200, deadends: 0
2021-07-16 17:06:10 INFO     Printing sample information to '/home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/sample.io'
2021-07-16 17:06:10 INFO     Invoking C++ feature generation module
2021-07-16 17:06:10 INFO     Executing "/home/orbital/ws/research/gpl/code/gpl/src/generators/adv/featuregen --complexity-bound 5 --timeout 15000 --dist-complexity-bound 4 --cond-complexity-bound 0 --print-denotations --workspace /home/orbital/ws/research/gpl/code/gpl/workspace/chase_1" on directory "/home/orbital/ws/research/gpl/code/gpl/experiments"
reading '/home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/transitions-info.io
BASIS: #concepts=52, #roles=3
ROLES: #roles=6
Generating concepts for k=1. Total concepts: 11 (2, 9, 0, 0, 0, 0)... 0 concepts generated, 3 pruned.
Generating concepts for k=2. Total concepts: 11 (2, 9, 0, 0, 0, 0)... 9 concepts generated, 48 pruned.
Generating concepts for k=3. Total concepts: 20 (2, 9, 9, 0, 0, 0)... 12 concepts generated, 126 pruned.
Generating concepts for k=4. Total concepts: 32 (2, 9, 9, 12, 0, 0)... 22 concepts generated, 308 pruned.
Generating concepts for k=5. Total concepts: 54 (2, 9, 9, 12, 22, 0)... 69 concepts generated, 363 pruned.
Total concepts: 123 (2, 9, 9, 12, 22, 69)... 
A total of 848 concepts were pruned
A total of 0 features were marked as goal-identifying
Generating cardinality features...
Generating distance features...
FEATURES: #features=44, #nullary=0, #boolean=15, #numerical=24, #distance=5, #conditional=0, #comparison=0
Printing concept, role and feature denotations to /home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/*-denotations.io.txt
Serializing all concepts and features to:
	/home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/serialized-concepts.io
	/home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/serialized-features.io
2021-07-16 17:06:16 INFO     Reading feature denotation matrix from /home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/feature-matrix.io
------------------------------------------------
(0) C++ CNF generation module:
------------------------------------------------
2021-07-16 17:06:16 INFO     Calling C++ MaxSAT module
2021-07-16 17:06:16 INFO     Executing "/home/orbital/ws/research/gpl/code/gpl/src/generators/adv/cnfgen --workspace /home/orbital/ws/research/gpl/code/gpl/workspace/chase_1 --v_slack 2 --initial-sample-size 20 --refinement-batch-size 50 --seed 0 --verbosity 3 --acyclicity topological --encodings_dir  --sampling_strategy full --optimal_steps 3 --consistency_bound 2 --n_features 2 --closed --maxsat_iter 10 --use_weighted_tx" on directory "/home/orbital/ws/research/gpl/code/gpl/experiments"
Parsing training data... 
reading '/home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/transitions-info.io
TransitionSample::read_dump: #states=250, #transitions=248, #transitions (adv)=320
reading '/home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/feature-matrix.io
FeatureMatrix::read_dump: #states=250, #features=44
Done. Training sample: [states: 250, transitions: 248 (from alive state: 248), unsolvable: 0, goals: 50, unknowns: 0, features: 44, est. size: 0.02 MB.]
Sampling 20 alive states at random


###  STARTING ITERATION 1  ###
Sample [sz=250]: 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 

Number of transitions/equivalence classes: 248/248
Number of necessarily bad transitions/classes: 0/0
Generating CNF encoding for 200 alive states, 248 alive-to-solvable and alive-to-dead transitions and 248 transition equivalence classes
A total of 1892 variables were created
	Select(f): 44
	Good(s, a, s'): 248
	Bad(s): 0
	V(s, d): 1600
Posting distinguishability constraints
A total of 71214 clauses were created
	Policy completeness [1]: 0
	Transition separation [5,6]: 61504
	V descending along good transitions [X]: 3710
	V is total function within bounds [X]: 5800
	Goal separation [X]: 0
	(Weighted) Select(f): 44
Writing final DIMACS file...
CNF [1892 vars, 71214 clauses] generated in 1.14 sec.
Calling: open-wbo_static /home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/theory.wsat > /home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/maxsat_solver_run.log
Call returned with exit code 7680
Solution with cost 8 found in 0.09sec.

Good(0, 0, 1) Good(2, 0, 11) Good(3, 0, 23) Good(5, 0, 27) Good(6, 0, 30) Good(10, 0, 38) Good(12, 2, 32) Good(16, 2, 27) Good(17, 0, 49) Good(26, 0, 59) 
Good(29, 0, 73) Good(18, 0, 52) Good(33, 2, 84) Good(34, 0, 92) Good(37, 0, 95) Good(40, 2, 85) Good(42, 2, 96) Good(44, 2, 65) Good(46, 2, 73) Good(41, 2, 92) 
Good(53, 2, 81) Good(55, 0, 101) Good(58, 3, 101) Good(62, 0, 111) Good(64, 0, 113) Good(66, 2, 113) Good(28, 2, 63) Good(78, 0, 122) Good(80, 3, 122) Good(80, 0, 123) 
Good(83, 2, 122) Good(87, 2, 125) Good(14, 0, 51) Good(87, 1, 113) Good(91, 3, 38) Good(91, 0, 133) Good(94, 3, 56) Good(68, 2, 111) Good(98, 0, 137) Good(106, 3, 140) 
Good(230, 1, 243) Good(181, 3, 215) Good(90, 0, 130) Good(181, 1, 210) Good(115, 2, 167) Good(190, 1, 218) Good(191, 1, 211) Good(202, 1, 226) Good(204, 1, 231) Good(8, 0, 32) 
Good(20, 0, 54) Good(206, 1, 233) Good(14, 2, 38) Good(232, 2, 242) Good(169, 1, 199) Good(161, 0, 198) Good(31, 0, 81) Good(212, 3, 240) Good(201, 1, 172) Good(76, 2, 118) 
Good(228, 1, 242) Good(150, 1, 107) Good(177, 0, 210) Good(50, 2, 23) Good(217, 1, 238) Good(207, 1, 234) Good(135, 3, 175) Good(110, 3, 156) Good(191, 3, 213) Good(166, 2, 198) 
Good(209, 1, 229) Good(115, 1, 163) Good(217, 3, 239) Good(219, 1, 241) Good(204, 2, 226) Good(128, 1, 85) Good(29, 2, 71) Good(223, 1, 239) Good(132, 3, 95) Good(70, 0, 118) 
Good(212, 1, 236) Good(214, 1, 240) Good(145, 3, 189) Good(179, 3, 210) Good(136, 3, 107) Good(83, 0, 124) Good(164, 1, 198) Good(164, 2, 199) Good(159, 1, 180) Good(117, 2, 163) 
Good(22, 0, 56) Good(157, 1, 192) Good(155, 1, 194) Good(100, 3, 137) Good(152, 1, 189) Good(9, 0, 36) Good(151, 1, 175) Good(196, 3, 199) Good(149, 1, 197) Good(188, 3, 211) 
Good(144, 1, 195) Good(45, 2, 11) Good(235, 3, 243) Good(144, 3, 197) Good(18, 2, 30) Good(147, 3, 194) Good(105, 3, 123) Good(142, 3, 180) Good(246, 1, 249) Good(141, 3, 192) 
Good(237, 3, 242) Good(127, 1, 96) Good(139, 3, 183) Good(108, 1, 123) Good(187, 3, 218) Good(129, 1, 167) Good(121, 2, 172) Good(13, 0, 47) Good(112, 2, 162) Good(108, 3, 153) 
Good(0, 0, 1) Good(2, 0, 11) Good(3, 0, 23) Good(5, 0, 27) Good(6, 0, 30) Good(10, 0, 38) Good(12, 2, 32) Good(16, 2, 27) Good(17, 0, 49) Good(26, 0, 59) 
Good(29, 0, 73) Good(18, 0, 52) Good(33, 2, 84) Good(34, 0, 92) Good(37, 0, 95) Good(40, 2, 85) Good(42, 2, 96) Good(44, 2, 65) Good(46, 2, 73) Good(41, 2, 92) 
Good(53, 2, 81) Good(55, 0, 101) Good(58, 3, 101) Good(62, 0, 111) Good(64, 0, 113) Good(66, 2, 113) Good(28, 2, 63) Good(78, 0, 122) Good(80, 3, 122) Good(80, 0, 123) 
Good(83, 2, 122) Good(87, 2, 125) Good(14, 0, 51) Good(87, 1, 113) Good(91, 3, 38) Good(91, 0, 133) Good(94, 3, 56) Good(68, 2, 111) Good(98, 0, 137) Good(106, 3, 140) 
Good(230, 1, 243) Good(181, 3, 215) Good(90, 0, 130) Good(181, 1, 210) Good(115, 2, 167) Good(190, 1, 218) Good(191, 1, 211) Good(202, 1, 226) Good(204, 1, 231) Good(8, 0, 32) 
Good(20, 0, 54) Good(206, 1, 233) Good(14, 2, 38) Good(232, 2, 242) Good(169, 1, 199) Good(161, 0, 198) Good(31, 0, 81) Good(212, 3, 240) Good(201, 1, 172) Good(76, 2, 118) 
Good(228, 1, 242) Good(150, 1, 107) Good(177, 0, 210) Good(50, 2, 23) Good(217, 1, 238) Good(207, 1, 234) Good(135, 3, 175) Good(110, 3, 156) Good(191, 3, 213) Good(166, 2, 198) 
Good(209, 1, 229) Good(115, 1, 163) Good(217, 3, 239) Good(219, 1, 241) Good(204, 2, 226) Good(128, 1, 85) Good(29, 2, 71) Good(223, 1, 239) Good(132, 3, 95) Good(70, 0, 118) 
Good(212, 1, 236) Good(214, 1, 240) Good(145, 3, 189) Good(179, 3, 210) Good(136, 3, 107) Good(83, 0, 124) Good(164, 1, 198) Good(164, 2, 199) Good(159, 1, 180) Good(117, 2, 163) 
Good(22, 0, 56) Good(157, 1, 192) Good(155, 1, 194) Good(100, 3, 137) Good(152, 1, 189) Good(9, 0, 36) Good(151, 1, 175) Good(196, 3, 199) Good(149, 1, 197) Good(188, 3, 211) 
Good(144, 1, 195) Good(45, 2, 11) Good(235, 3, 243) Good(144, 3, 197) Good(18, 2, 30) Good(147, 3, 194) Good(105, 3, 123) Good(142, 3, 180) Good(246, 1, 249) Good(141, 3, 192) 
Good(237, 3, 242) Good(127, 1, 96) Good(139, 3, 183) Good(108, 1, 123) Good(187, 3, 218) Good(129, 1, 167) Good(121, 2, 172) Good(13, 0, 47) Good(112, 2, 162) Good(108, 3, 153) 
Num Good(s, a, s') selected: 120 (48.39%)
Num Bad(s) selected: 0 (0.00%)
Num selected features: 2 (4.55%)
Features: 
	0: Dist[col-has-white_king;adjacent_col;col-has-black_king] [k=4]
	1: Dist[row-has-white_king;adjacent_row;row-has-black_king] [k=4]
Solution found in iteration #1 is correct!
DNF transition-classifier saved in /home/orbital/ws/research/gpl/code/gpl/workspace/chase_1/classifier.txt
Total times: Theory generation: 1.14, Solver: 0.09, TOTAL: 1.25
------------------------------------------------
(END Episode 0)
------------------------------------------------
================================================================================
END OF STEP #1: Train: Explore the state space of the training instances. 8.44 CPU sec - 52.11 MB
================================================================================
================================================================================
(pid: 2690) STARTING STEP #2: Testing of the D2L policy
================================================================================

POLICY:
Features (#: 2; total k: 8; max k = 4):
  (a) Dist[col-has-white_king;adjacent_col;col-has-black_king] [k=4]
  (b) Dist[row-has-white_king;adjacent_row;row-has-black_king] [k=4]
Invariants: 
Policy:
  1. a>0 AND b=0 -> {a ↓, b ↑}
  2. a>0 AND b>0 -> {a ↓, b ↓}
  3. a=0 AND b>0 -> {a ↑, b ↓}

2021-07-16 17:06:19 INFO     Testing policy in instance: chase - 12
Traceback (most recent call last):
  File "/home/orbital/ws/research/gpl/code/gpl/src/d2l/src/sltp/driver.py", line 160, in _run
    exitcode, output = self.target(config=config, data=data, rng=rng)
  File "/home/orbital/ws/research/gpl/code/gpl/src/gpl/demo.py", line 246, in run
    res = test_d2l_policy_on_gym_env(config, data, get_policy, rng)
  File "/home/orbital/ws/research/gpl/code/gpl/src/gpl/demo.py", line 72, in test_d2l_policy_on_gym_env
    exitcode, solution, path, expanded = run_test(config, search_policy, task, instance_name, rng)
  File "/home/orbital/ws/research/gpl/code/gpl/src/gpl/demo.py", line 161, in run_test
    spp = task.transition_env(sp, interactive=True)
  File "/home/orbital/ws/research/gpl/code/gpl/src/gpl/domains/grid_games/task.py", line 52, in transition_env
    for event in pygame.event.get():
pygame.error: video system not initialized
2021-07-16 17:49:05 ERROR    Critical error in the pipeline
2021-07-16 17:49:05 ERROR    (<gpl.pipeline_steps.PolicyTesting object at 0x7f3b0297ca00>, 'Critical error processing step "Testing of the D2L policy". Error message: Error: video system not initialized')
